/*
 * This file is generated by jOOQ.
*/
package com.poc.restfulpoc.jooq.tables;


import com.poc.restfulpoc.jooq.Indexes;
import com.poc.restfulpoc.jooq.Keys;
import com.poc.restfulpoc.jooq.Public;
import com.poc.restfulpoc.jooq.tables.records.PostCommentRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PostComment extends TableImpl<PostCommentRecord> {

    private static final long serialVersionUID = -950535997;

    /**
     * The reference instance of <code>PUBLIC.POST_COMMENT</code>
     */
    public static final PostComment POST_COMMENT = new PostComment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PostCommentRecord> getRecordType() {
        return PostCommentRecord.class;
    }

    /**
     * The column <code>PUBLIC.POST_COMMENT.ID</code>.
     */
    public final TableField<PostCommentRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.POST_COMMENT.REVIEW</code>.
     */
    public final TableField<PostCommentRecord, String> REVIEW = createField("REVIEW", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>PUBLIC.POST_COMMENT.POST_ID</code>.
     */
    public final TableField<PostCommentRecord, Long> POST_ID = createField("POST_ID", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>PUBLIC.POST_COMMENT</code> table reference
     */
    public PostComment() {
        this(DSL.name("POST_COMMENT"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.POST_COMMENT</code> table reference
     */
    public PostComment(String alias) {
        this(DSL.name(alias), POST_COMMENT);
    }

    /**
     * Create an aliased <code>PUBLIC.POST_COMMENT</code> table reference
     */
    public PostComment(Name alias) {
        this(alias, POST_COMMENT);
    }

    private PostComment(Name alias, Table<PostCommentRecord> aliased) {
        this(alias, aliased, null);
    }

    private PostComment(Name alias, Table<PostCommentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FKNA4Y825FDC5HW8AOW65IJEXM0_INDEX_2, Indexes.PRIMARY_KEY_24);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PostCommentRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_24;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PostCommentRecord>> getKeys() {
        return Arrays.<UniqueKey<PostCommentRecord>>asList(Keys.CONSTRAINT_24);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PostCommentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PostCommentRecord, ?>>asList(Keys.FKNA4Y825FDC5HW8AOW65IJEXM0);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PostComment as(String alias) {
        return new PostComment(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PostComment as(Name alias) {
        return new PostComment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PostComment rename(String name) {
        return new PostComment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PostComment rename(Name name) {
        return new PostComment(name, null);
    }
}
